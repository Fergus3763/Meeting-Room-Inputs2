<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8"/>
<meta name="viewport" content="width=device-width,initial-scale=1"/>
<title>Tranche 3e — AV-only Hour-or-Day Pricing (VAT + Neutral Copy)</title>
<style>
body{font-family:system-ui,-apple-system,Segoe UI,Roboto,Helvetica,Arial;margin:0;background:#f7fafc;color:#0f172a}
.container{max-width:1200px;margin:0 auto;padding:24px}
.card{background:#fff;border:1px solid #e2e8f0;border-radius:14px;box-shadow:0 1px 2px rgba(0,0,0,.04);margin-bottom:16px}
.card-h{padding:14px 16px;border-bottom:1px solid #e2e8f0}
.card-c{padding:16px}
h1{margin:0 0 6px;font-size:20px}
h2{margin:0 0 8px;font-size:16px}
.small{font-size:12px;color:#64748b}
label{display:block;font-size:13px;color:#334155;margin:8px 0 4px}
input,select,textarea{width:100%;border:1px solid #e2e8f0;border-radius:10px;padding:9px 11px}
textarea{min-height:86px}
.grid{display:grid;gap:12px}
.grid-2{grid-template-columns:repeat(2,minmax(0,1fr))}
.grid-3{grid-template-columns:repeat(3,minmax(0,1fr))}
@media(max-width:1000px){.grid-2,.grid-3{grid-template-columns:1fr}}
.table{width:100%;border-collapse:collapse;margin-top:8px}
.table th,.table td{border:1px solid #e2e8f0;padding:6px 8px;font-size:13px;vertical-align:top}
.table th{background:#f1f5f9;text-align:left}
.actions{display:flex;gap:8px;flex-wrap:wrap}
.btn{border:1px solid #e2e8f0;background:#fff;border-radius:10px;padding:8px 12px;cursor:pointer}
.btn.primary{background:#2563eb;color:#fff;border-color:#2563eb}
.btn.danger{border-color:#ef4444;color:#991b1b}
.badge{border:1px solid #e2e8f0;border-radius:999px;padding:4px 8px;font-size:12px;background:#fff;margin-left:6px}
.badge.ok{border-color:#bbf7d0;background:#f0fdf4;color:#166534}
.hr{height:1px;background:#e2e8f0;margin:12px 0}
.section{border:1px dashed #e2e8f0;border-radius:12px;padding:12px;margin-top:10px}
.item{display:grid;grid-template-columns:1fr 130px 110px;gap:10px;align-items:center;border-bottom:1px dashed #e2e8f0;padding:6px 0}
.item:last-child{border-bottom:none}
.pill{padding:4px 8px;border:1px solid #e2e8f0;border-radius:999px;font-size:12px}
.right{display:flex;justify-content:flex-end;gap:12px;align-items:center}
.totals{display:flex;gap:10px;flex-wrap:wrap}
.totalbox{border:1px solid #e2e8f0;background:#fff;border-radius:10px;padding:6px 10px;font-weight:600}
pre{background:#0b1220;color:#e5e7eb;padding:12px;border-radius:12px;max-height:360px;overflow:auto}
ul.clean{list-style:disc;margin-left:18px;padding-left:0}
.disabled input, .disabled select{opacity:.65;pointer-events:none}
.note{font-size:12px;color:#475569;margin-left:6px}
</style>
</head>
<body>
<div class="container">
  <div class="card">
    <div class="card-h">
      <h1>Tranche 3e — AV-only Hour-or-Day Pricing</h1>
      <div class="small">New add-ons created inside the <b>Audio/Visual</b> category default to <b>Hour or Day</b> pricing; other categories default to simple pricing. Booker preview uses neutral copy and VAT totals.</div>
    </div>
    <div class="card-c actions">
      <button class="btn" id="save">Save draft</button>
      <button class="btn" id="load">Load draft</button>
      <button class="btn" id="clear">Clear draft</button>
      <button class="btn" id="importJSON">Import JSON</button>
      <button class="btn primary" id="exportJSON">Export JSON</button>
      <span id="savedBadge" class="badge">Not saved</span>
    </div>
  </div>

  <div class="card">
    <div class="card-h"><h2>Copy / Terminology</h2></div>
    <div class="card-c grid grid-3">
      <div><label>Closing section title (booker)</label><input id="copyClosingTitle" value="Optional add-ons before checkout"/></div>
      <div><label>Per-category lead (booker)</label><input id="copyClosingLead" value="You may also add:"/></div>
    </div>
  </div>

  <div class="card">
    <div class="card-h"><h2>Venue tax/VAT</h2></div>
    <div class="card-c grid grid-3">
      <div><label>VAT rate (%)</label><input id="vatRate" type="number" step="0.01" value="20"></div>
      <div class="small">Used to compute Gross total for taxable items; untaxed items remain ex VAT.</div>
    </div>
  </div>

  <div class="card">
    <div class="card-h"><h2>Categories with embedded editors</h2></div>
    <div class="card-c" id="catWrap"></div>
  </div>

  <div class="card">
    <div class="card-h"><h2>Booker Flow Preview</h2></div>
    <div class="card-c">
      <div class="grid grid-3">
        <div><label>Date</label><input id="qDate" type="date"></div>
        <div><label>Start</label><input id="qStart" type="time" value="09:00"></div>
        <div><label>End</label><input id="qEnd" type="time" value="12:00"></div>
        <div><label>Attendees</label><input id="qAtt" type="number" value="12" min="1"></div>
      </div>
      <div class="hr"></div>
      <div id="sections"></div>
      <div class="right" style="margin-top:10px">
        <div class="totals">
          <div class="totalbox" id="totEx">Total ex VAT: €0.00</div>
          <div class="totalbox" id="totVat">VAT: €0.00</div>
          <div class="totalbox" id="totInc">Total inc VAT: €0.00</div>
        </div>
      </div>
      <div class="actions" style="margin-top:10px"><button class="btn primary" id="goToCheckout">Continue</button></div>
      <div class="hr"></div>
      <h3 id="closingTitle" style="margin:0">Optional add-ons before checkout</h3>
      <div id="closingUpsell"></div>
      <div class="right" style="margin-top:10px">
        <button class="btn primary" id="recalc">Recalculate totals</button>
      </div>
      <div class="hr"></div>
      <div id="quoteOut"></div>
    </div>
  </div>

  <div class="card">
    <div class="card-h"><h2>Export Payload</h2></div>
    <div class="card-c"><pre id="preview"></pre></div>
  </div>
</div>

<script>
const DKEY="venue-tranche3e-av-default";

const defaultUnits={per_person:"person", per_item:"each", per_room:"room", per_hour:"hour", per_day:"day"};

const data={
  vatRate:20,
  copy:{closingTitle:"Optional add-ons before checkout", closingLead:"You may also add:"},
  categories:[
    {id:"CAT-FNB", name:"Food & Beverage", sectionLabel:"F&B", sort:10, showClosingUpsell:true, standards:[{id:"STD-FIL", name:"Filtered water on the table"}]},
    {id:"CAT-AV", name:"Audio/Visual", sectionLabel:"AV", sort:20, showClosingUpsell:true, standards:[{id:"STD-WIFI", name:"Wi-Fi included"}]}
  ],
  extras:[
    {id:"ADD-COF", pricingMode:"simple", name:"Coffee & Tea (refills)", categoryId:"CAT-FNB", priceType:"per_person", unitName:"person", priceExVAT:4.5, taxable:true, minQty:0, maxQty:0, step:1, defaultSelected:false, leadTimeHours:0, cutoffHours:0, showInMain:true, offerAtClosing:true, visibility:"public", publicLabel:"Coffee & Tea"},
    {id:"ADD-PTZ", pricingMode:"hour_or_day", name:"PTZ Camera Kit", categoryId:"CAT-AV", ratePerHourExVAT:60, ratePerDayExVAT:180, dayCapHours:4, roundHoursUp:true, taxable:true, minQty:0, maxQty:1, step:1, defaultSelected:false, leadTimeHours:24, cutoffHours:2, showInMain:true, offerAtClosing:true, visibility:"public", publicLabel:"PTZ Camera Kit"}
  ]
};

function $(id){return document.getElementById(id)}
function saved(state){const b=$("savedBadge"); b.textContent = state ? "Saved" : "Not saved"; b.className = "badge" + (state ? " ok": "");}
function updatePreview(){ $("preview").textContent = JSON.stringify(data,null,2); saved(false); buildSections(); calcTotalsLive(); }
function toMin(t){ if(!t) return 0; const [h,m]=t.split(":").map(Number); return h*60+(m||0); }

function isAV(cat){
  const id=(cat.id||"").toLowerCase();
  const name=(cat.name||"").toLowerCase();
  const lbl=(cat.sectionLabel||"").toLowerCase();
  return id.includes("av") || name.includes("audio") || name.includes("visual") || name.includes("a/v") || lbl.includes("av");
}

// Categories + embedded editors
function renderCategories(){
  const wrap=$("catWrap"); wrap.innerHTML="";
  const cats=[...data.categories].sort((a,b)=> (a.sort||0)-(b.sort||0));
  cats.forEach((cat,idx)=>{
    const card=document.createElement("div"); card.className="section";
    const head=document.createElement("div"); head.className="actions"; head.innerHTML=`<div><strong>${cat.sectionLabel||cat.name}</strong> <span class="pill">ID ${cat.id}</span> ${isAV(cat) ? "<span class='small'>(New add-ons default to Hour/Day here)</span>" : ""}</div>`;
    card.append(head);

    const basics=document.createElement("div"); basics.className="grid grid-3";
    function inp(label, val, cb){ const w=document.createElement("div"); w.innerHTML=`<label>${label}</label>`; const i=document.createElement("input"); i.value=val||""; i.oninput=()=>{cb(i.value); updatePreview();}; w.append(i); return w; }
    function num(label, val, cb){ const w=document.createElement("div"); w.innerHTML=`<label>${label}</label>`; const i=document.createElement("input"); i.type="number"; i.value=val||0; i.oninput=()=>{cb(Number(i.value||0)); updatePreview();}; w.append(i); return w; }
    function bool(label, val, cb){ const w=document.createElement("div"); w.innerHTML=`<label>${label}</label>`; const i=document.createElement("input"); i.type="checkbox"; i.checked=!!val; i.onchange=()=>{cb(i.checked); updatePreview();}; w.append(i); return w; }
    basics.append(inp("Name", cat.name, v=>cat.name=v), inp("Booker label", cat.sectionLabel, v=>cat.sectionLabel=v), num("Sort order", cat.sort, v=>cat.sort=v), bool("Show at closing?", cat.showClosingUpsell, v=>cat.showClosingUpsell=v));
    card.append(basics);

    // Standards
    const std=document.createElement("div"); std.className="section"; std.innerHTML="<h4>Standards (included, non-priced)</h4>";
    const stdList=document.createElement("ul"); stdList.className="clean";
    (cat.standards=cat.standards||[]).forEach((s,si)=>{
      const li=document.createElement("li");
      const name=document.createElement("input"); name.style.width="60%"; name.value=s.name||""; name.oninput=()=>{s.name=name.value; updatePreview();};
      const del=document.createElement("button"); del.className="btn danger"; del.textContent="Delete"; del.onclick=()=>{cat.standards.splice(si,1); renderCategories(); updatePreview();};
      li.append(name, del); stdList.append(li);
    });
    const addStd=document.createElement("button"); addStd.className="btn"; addStd.textContent="Add standard"; addStd.onclick=()=>{ (cat.standards=cat.standards||[]).push({id:"STD-"+Math.random().toString(36).slice(2,6).toUpperCase(), name:""}); renderCategories(); updatePreview(); };
    std.append(stdList, addStd); card.append(std);

    // Add-ons
    const addons=document.createElement("div"); addons.className="section"; addons.innerHTML="<h4>Add-ons (booker-facing options)</h4>";
    const table=document.createElement("table"); table.className="table";
    table.innerHTML=`<thead><tr>
      <th>ID</th><th>Name</th><th>Pricing mode</th><th>Price type</th><th>Unit</th><th>Price ex VAT</th>
      <th>Rate/hr</th><th>Rate/day</th><th>Day cap (hrs)</th><th>Round hours up?</th>
      <th>Taxable?</th><th>Min</th><th>Max</th><th>Step</th><th>Default?</th><th>LeadH</th><th>CutoffH</th>
      <th>Show in main?</th><th>Offer at closing?</th><th>Visibility</th><th>Public Label</th><th></th>
    </tr></thead><tbody></tbody>`;
    const tb=table.querySelector("tbody");
    const priceTypes=["per_person","per_item","per_room","per_hour","per_day"];
    const visOpts=["public","hidden","public_aggregate"];
    (data.extras||[]).filter(x=>x.categoryId===cat.id).forEach((row,ri)=>{
      function inp(val, cb, type="text"){ const i=document.createElement("input"); if(type==="number"){i.type="number"; i.step="0.01"}; i.value=val??""; i.oninput=()=>{ cb(type==="number"? Number(i.value||0): i.value); updatePreview();}; return i; }
      function bool(val, cb){ const i=document.createElement("input"); i.type="checkbox"; i.checked=!!val; i.onchange=()=>{ cb(i.checked); updatePreview();}; return i; }
      function sel(val, opts, cb){ const s=document.createElement("select"); opts.forEach(o=>s.append(new Option(o,o))); s.value=val||opts[0]; s.onchange=()=>{ cb(s.value); updatePreview();}; return s; }

      const tr=document.createElement("tr");
      const idCell = inp(row.id, v=>row.id=v);
      const nameCell = inp(row.name, v=>row.name=v);
      const modeSel = sel(row.pricingMode|| (isAV(cat) ? "hour_or_day" : "simple"), ["simple","hour_or_day"], v=>{ row.pricingMode=v; refreshRowState(); });
      const priceTypeSel = sel(row.priceType||"per_item", priceTypes, v=>{ row.priceType=v; if(!row.unitName || Object.values(defaultUnits).includes(row.unitName)) { row.unitName = defaultUnits[v]||""; unitInp.value=row.unitName; } });
      const unitInp = inp(row.unitName||defaultUnits[row.priceType]||"", v=>row.unitName=v);
      const priceInp = inp(row.priceExVAT||0, v=>row.priceExVAT=v, "number");
      const rateHrInp = inp(row.ratePerHourExVAT||0, v=>row.ratePerHourExVAT=v, "number");
      const rateDayInp = inp(row.ratePerDayExVAT||0, v=>row.ratePerDayExVAT=v, "number");
      const capInp = inp(row.dayCapHours||8, v=>row.dayCapHours=v, "number");
      const roundInp = bool(row.roundHoursUp!==false, v=>row.roundHoursUp=v);
      const taxable = bool(row.taxable, v=>row.taxable=v);
      const minInp = inp(row.minQty||0, v=>row.minQty=v,"number");
      const maxInp = inp(row.maxQty||0, v=>row.maxQty=v,"number");
      const stepInp = inp(row.step||1, v=>row.step=v,"number");
      const defInp = bool(row.defaultSelected, v=>row.defaultSelected=v);
      const leadInp = inp(row.leadTimeHours||0, v=>row.leadTimeHours=v,"number");
      const cutInp = inp(row.cutoffHours||0, v=>row.cutoffHours=v,"number");
      const showMain = bool(row.showInMain!==false, v=>row.showInMain=v);
      const offerClose = bool(row.offerAtClosing!==false, v=>row.offerAtClosing=v);
      const visSel = sel(row.visibility||"public", visOpts, v=>row.visibility=v);
      const pubLbl = inp(row.publicLabel||"", v=>row.publicLabel=v);
      const del=document.createElement("button"); del.className="btn danger"; del.textContent="Delete"; del.onclick=()=>{ const idx=data.extras.findIndex(e=>e.id===row.id); if(idx>=0){data.extras.splice(idx,1);} renderCategories(); buildSections(); updatePreview(); };

      function refreshRowState(){
        const simple = (row.pricingMode!=="hour_or_day");
        [priceTypeSel, unitInp, priceInp].forEach(el=>{ el.disabled = !simple; el.parentElement && el.parentElement.classList.toggle("disabled", !simple); });
        [rateHrInp, rateDayInp, capInp, roundInp].forEach(el=>{ el.disabled = simple; el.parentElement && el.parentElement.classList.toggle("disabled", simple); });
      }
      tr.append(
        td(idCell), td(nameCell), td(modeSel),
        td(priceTypeSel), td(unitInp), td(priceInp),
        td(rateHrInp), td(rateDayInp), td(capInp), td(roundInp),
        td(taxable), td(minInp), td(maxInp), td(stepInp), td(defInp), td(leadInp), td(cutInp),
        td(showMain), td(offerClose), td(visSel), td(pubLbl), td(del)
      );
      tb.append(tr);
      refreshRowState();
    });
    const addBtn=document.createElement("button"); addBtn.className="btn"; addBtn.textContent="Add add-on in this category";
    addBtn.onclick=()=>{
      const defaultMode = isAV(cat) ? "hour_or_day" : "simple";
      (data.extras=data.extras||[]).push({
        id:"ADD-"+Math.random().toString(36).slice(2,6).toUpperCase(),
        pricingMode: defaultMode,
        name:"",
        categoryId:cat.id,
        priceType:"per_item",
        unitName:defaultUnits["per_item"],
        priceExVAT:0, ratePerHourExVAT:0, ratePerDayExVAT:0, dayCapHours:8, roundHoursUp:true,
        taxable:true, minQty:0, maxQty:0, step:1, defaultSelected:false, leadTimeHours:0, cutoffHours:0, showInMain:true, offerAtClosing:true, visibility:"public", publicLabel:""
      });
      renderCategories(); buildSections(); updatePreview();
    };
    addons.append(table, addBtn); card.append(addons);
    wrap.append(card);
  });
}
function td(node){ const d=document.createElement("td"); d.append(node); return d; }

// Booker preview
function buildSections(){
  const wrap=$("sections"); wrap.innerHTML="";
  const cats=[...data.categories].sort((a,b)=> (a.sort||0)-(b.sort||0));
  cats.forEach(cat=>{
    const sec=document.createElement("div"); sec.className="section";
    const h=document.createElement("h3"); h.textContent=(cat.sectionLabel||cat.name)+" — Add-ons"; sec.append(h);
    const items=(data.extras||[]).filter(x=>x.categoryId===cat.id && x.showInMain!==false && (x.visibility||"public")!=="hidden");
    if(items.length===0){ const em=document.createElement("div"); em.className="small"; em.textContent="No add-ons in this section."; sec.append(em); wrap.append(sec); return; }
    items.forEach(x=>{
      const row=document.createElement("div"); row.className="item";
      const modeText = (x.pricingMode==="hour_or_day") ? "hour/day" : (x.priceType||"");
      const label=document.createElement("div"); label.innerHTML="<strong>"+(x.publicLabel||x.name||x.id)+"</strong> <span class='small'>("+modeText+")</span>";
      const qty=document.createElement("input"); qty.type="number"; qty.step=x.step||1; qty.min=x.minQty||0; qty.max=x.maxQty||99999; qty.value = x.defaultSelected ? Math.max((x.minQty||0),(x.step||1)) : 0; qty.id="sel-extra-"+x.id; qty.oninput=calcTotalsLive;
      const price=document.createElement("div"); price.className="small";
      if(x.pricingMode==="hour_or_day"){
        price.textContent = "€"+(x.ratePerHourExVAT||0)+"/hour or €"+(x.ratePerDayExVAT||0)+"/day (cap "+(x.dayCapHours||8)+"h)";
      }else{
        price.textContent = "€"+(x.priceExVAT||0)+" / "+(x.unitName||"unit");
      }
      row.append(label, qty, price); sec.append(row);
    });
    wrap.append(sec);
  });
}
function collectSelected(){
  const selected=[];
  (data.extras||[]).forEach(x=>{
    const input=document.getElementById("sel-extra-"+x.id);
    if(!input) return;
    const v=Number(input.value||0);
    if(v>0) selected.push(Object.assign({}, x, {qty:v}));
  });
  return selected;
}
function priceLines(arr){
  const start=$("qStart").value||"09:00", end=$("qEnd").value||"10:00"; let hours=Math.max(1,(toMin(end)-toMin(start))/60);
  const attendees=Number($("qAtt").value||0);
  const lines=[];
  (arr||[]).forEach(x=>{
    let qty=x.qty||0; if(qty<=0) return;
    let ex=0, basis="", unitPriceDisp=0, unitNameDisp=x.unitName||"";
    if(x.pricingMode==="hour_or_day"){
      let h = hours;
      if(x.roundHoursUp!==false){ h = Math.ceil(h); }
      const cap = Number(x.dayCapHours||8);
      const hrRate = Number(x.ratePerHourExVAT||0);
      const dayRate = Number(x.ratePerDayExVAT||0);
      if(h >= cap && dayRate>0){
        ex = dayRate * qty;
        basis = "day rate";
        unitPriceDisp = dayRate;
        unitNameDisp = "day";
      }else{
        ex = hrRate * h * qty;
        basis = "hourly × "+h+"h";
        unitPriceDisp = hrRate;
        unitNameDisp = "hour";
      }
    }else{
      const unit=x.priceExVAT||0; let mult=1;
      if(x.priceType==="per_person") mult = attendees * qty;
      else if(x.priceType==="per_item") mult = qty;
      else if(x.priceType==="per_room") mult = qty;
      else if(x.priceType==="per_hour") mult = Math.max(1,hours) * qty;
      else if(x.priceType==="per_day") mult = qty;
      ex = unit * mult;
      basis = x.priceType||"";
      unitPriceDisp = unit;
    }
    const vat = (x.taxable? (ex * (Number(data.vatRate||0)/100)) : 0);
    lines.push({label:x.publicLabel||x.name||x.id, qty, unitName:unitNameDisp, unitPrice:unitPriceDisp, basis, exVAT:ex, vat, incVAT: ex+vat});
  });
  return lines;
}
function sumTotals(lines){ return lines.reduce((acc,l)=>{ acc.ex+=l.exVAT; acc.vat+=l.vat; acc.inc+=l.incVAT; return acc; }, {ex:0, vat:0, inc:0}); }
function calcTotalsLive(){ const lines=priceLines(collectSelected()); const t=sumTotals(lines); $("totEx").textContent="Total ex VAT: €"+t.ex.toFixed(2); $("totVat").textContent="VAT: €"+t.vat.toFixed(2); $("totInc").textContent="Total inc VAT: €"+t.inc.toFixed(2); }
["qDate","qStart","qEnd","qAtt","vatRate"].forEach(id=>{ const el=document.getElementById(id); if(el) el.oninput=()=>{ if(id==="vatRate"){ data.vatRate=Number(el.value||0);} calcTotalsLive(); }; });

function goToCheckout(){
  const selected=collectSelected();
  const selectedIds=new Set(selected.map(s=>s.id));
  const closing=$("closingUpsell"); closing.innerHTML="";
  const cats=[...data.categories].sort((a,b)=> (a.sort||0)-(b.sort||0));
  cats.forEach(cat=>{
    if(!cat.showClosingUpsell) return;
    const ups=(data.extras||[]).filter(x=> x.categoryId===cat.id && (x.visibility||"public")!=="hidden" && x.offerAtClosing!==false && !selectedIds.has(x.id));
    if(!ups.length) return;
    const sec=document.createElement("div"); sec.className="section"; const h=document.createElement("h4"); h.textContent=(cat.sectionLabel||cat.name)+" — "+(data.copy?.closingLead || "You may also add:"); sec.append(h);
    ups.forEach(x=>{
      const row=document.createElement("div"); row.className="item";
      const label=document.createElement("div"); label.innerHTML="<strong>"+(x.publicLabel||x.name||x.id)+"</strong>";
      const qty=document.createElement("input"); qty.type="number"; qty.step=x.step||1; qty.min=x.minQty||0; qty.max=x.maxQty||99999; qty.value=0; qty.id="ups-extra-"+x.id;
      const price=document.createElement("div"); price.className="small";
      if(x.pricingMode==="hour_or_day"){
        price.textContent = "€"+(x.ratePerHourExVAT||0)+"/hour or " + "€"+(x.ratePerDayExVAT||0)+"/day (cap "+(x.dayCapHours||8)+"h)";
      }else{
        price.textContent = "€"+(x.priceExVAT||0)+" / "+(x.unitName||"unit");
      }
      row.append(label, qty, price); sec.append(row);
    });
    closing.append(sec);
  });
  renderQuote(selected);
  $("closingTitle").textContent = data.copy?.closingTitle || "Optional add-ons before checkout";
}
function renderQuote(selected){
  const lines=priceLines(selected);
  const t=sumTotals(lines);
  const out=$("quoteOut");
  const rows=lines.map(l=> `<tr><td>${l.label}</td><td>${l.qty}</td><td>${l.unitName}</td><td>${l.basis}</td><td>€${Number(l.unitPrice).toFixed(2)}</td><td>€${l.exVAT.toFixed(2)}</td><td>€${l.vat.toFixed(2)}</td><td>€${l.incVAT.toFixed(2)}</td></tr>`).join("");
  out.innerHTML=`
    <h3>Summary (before final review)</h3>
    <table class="table"><thead><tr><th>Item</th><th>Qty</th><th>Unit</th><th>Basis</th><th>Unit Rate</th><th>Ex VAT</th><th>VAT</th><th>Inc VAT</th></tr></thead>
    <tbody>${rows || "<tr><td colspan='8' class='small'>No add-ons selected.</td></tr>"}</tbody></table>
    <div class="right" style="margin-top:8px">
      <div class="pill">Ex VAT: €${t.ex.toFixed(2)}</div>
      <div class="pill">VAT: €${t.vat.toFixed(2)}</div>
      <div class="pill">Inc VAT: €${t.inc.toFixed(2)}</div>
    </div>`;
}
function recalcWithUpsells(){
  const selected=collectSelected();
  (data.extras||[]).forEach(x=>{ const el=document.getElementById("ups-extra-"+x.id); if(el){ const v=Number(el.value||0); if(v>0) selected.push(Object.assign({}, x, {qty:v})); } });
  renderQuote(selected); const lines=priceLines(selected); const t=sumTotals(lines);
  $("totEx").textContent="Total ex VAT: €"+t.ex.toFixed(2);
  $("totVat").textContent="VAT: €"+t.vat.toFixed(2);
  $("totInc").textContent="Total inc VAT: €"+t.inc.toFixed(2);
}

document.getElementById("goToCheckout").onclick=goToCheckout;
document.getElementById("recalc").onclick=recalcWithUpsells;

// Save/Load/Import/Export
document.getElementById("save").onclick=()=>{ localStorage.setItem(DKEY, JSON.stringify(data)); saved(true); alert("Draft saved to this browser."); };
document.getElementById("load").onclick=()=>{ const raw=localStorage.getItem(DKEY); if(!raw) return alert("No draft found"); const obj=JSON.parse(raw); Object.keys(data).forEach(k=>delete data[k]); Object.assign(data,obj); init(); saved(true); alert("Draft loaded."); };
document.getElementById("clear").onclick=()=>{ localStorage.removeItem(DKEY); saved(false); alert("Draft cleared."); };
document.getElementById("importJSON").onclick=()=>{ const f=document.createElement("input"); f.type="file"; f.accept="application/json"; f.onchange=async()=>{ const t=await f.files[0].text(); const obj=JSON.parse(t); Object.keys(data).forEach(k=>delete data[k]); Object.assign(data,obj); init(); saved(true); }; f.click(); };
document.getElementById("exportJSON").onclick=()=>{ const blob=new Blob([JSON.stringify(data,null,2)],{type:"application/json"}); const url=URL.createObjectURL(blob); const a=document.createElement("a"); a.href=url; a.download="venue-tranche3e-av-default.json"; a.click(); URL.revokeObjectURL(url); };

function init(){ document.getElementById("vatRate").value = data.vatRate||0; document.getElementById("copyClosingTitle").value=data.copy?.closingTitle||""; document.getElementById("copyClosingLead").value=data.copy?.closingLead||""; renderCategories(); buildSections(); updatePreview(); calcTotalsLive(); }
init();
</script>
</body>
</html>
