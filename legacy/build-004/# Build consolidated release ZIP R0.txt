# Build consolidated release ZIP: R004f-l_Release_CalendarPack.zip
from textwrap import dedent
import zipfile, json, datetime, random, string

def build_html():
    return dedent(r"""
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>[R004f‑l] Admin — Calendar Pack (Hours + Availability + Quote Gate)</title>
<style>
:root{--bd:#e5e7eb;--ink:#0f172a;--mut:#64748b;--brand:#0ea5e9}
*{box-sizing:border-box}body{margin:0;font:14px/1.45 system-ui,-apple-system,Segoe UI,Roboto,Arial;color:var(--ink);background:#fff}
.wrap{max-width:1600px;margin:0 auto;padding:16px}
header{position:sticky;top:0;background:#fff;border-bottom:1px solid var(--bd);z-index:5}
.row{display:flex;gap:10px;align-items:center;flex-wrap:wrap}.sp{flex:1}
.btn{border:1px solid var(--bd);border-radius:10px;background:#fff;padding:8px 12px;cursor:pointer;font-weight:600}
.btn.small{padding:6px 10px;font-size:.9rem}.btn.primary{background:var(--brand);border-color:var(--brand);color:#fff}
.pill{padding:4px 8px;border:1px solid var(--bd);border-radius:999px;font-size:12px;background:#fff}
.card{background:#fff;border:1px solid var(--bd);border-radius:14px;margin:16px 0}
.h{padding:12px 16px;border-bottom:1px solid var(--bd);display:flex;gap:8px;align-items:center}.c{padding:16px}
.tabs{display:flex;gap:8px;border-bottom:1px solid var(--bd);padding:8px 0}
.tabs button{all:unset;padding:10px 12px;border-radius:10px;cursor:pointer;font-weight:600;color:#475569}
.tabs button.active{background:#f1f5f9;color:#111827}
.section{display:none}.section.active{display:block}
small.mut{color:var(--mut)}
.grid{display:grid;gap:12px}.g2{grid-template-columns:1fr 1fr}.g3{grid-template-columns:1fr 1fr 1fr}.g4{grid-template-columns:repeat(4,1fr)}
.tableWrap{overflow-x:auto}
label{font-weight:600;font-size:12px;display:block;margin-bottom:4px}
input,select,textarea{border:1px solid var(--bd);border-radius:10px;padding:8px 10px;width:100%}
textarea{min-height:90px}
.kbd{font-family:ui-monospace,monospace;border:1px solid var(--bd);padding:0 6px;border-radius:6px;background:#f8fafc}

.calendar{display:grid;grid-template-columns:80px 1fr;border:1px solid var(--bd);border-radius:12px;overflow:hidden}
.calHead{display:grid;grid-template-columns:80px 1fr;background:#f8fafc;border-bottom:1px solid var(--bd)}
.calHead div{padding:8px 10px;font-weight:600}
.times{border-right:1px solid var(--bd)}
.slot{height:28px;border-bottom:1px dashed #f1f5f9}
.col{position:relative}
.event{position:absolute;left:4px;right:4px;border-radius:10px;color:#fff;padding:4px 6px;font-size:12px;box-shadow:0 2px 6px rgba(0,0,0,.1)}
.ev-book{background:#10b981cc}.ev-hold{background:#f59e0bcc}.ev-blk{background:#1f2937dd}.ev-main{background:#6366f1cc}
.ghost{position:absolute;left:4px;right:4px;background:#38bdf833;border:1px dashed #38bdf8;border-radius:10px}
.badge{display:inline-flex;align-items:center;gap:6px;border:1px solid var(--bd);border-radius:999px;padding:4px 8px;background:#fff}
.warn{background:#fff1f2;border:2px solid #fecaca;color:#7f1d1d;border-radius:12px;padding:10px;margin:8px 0}
.info{background:#ecfeff;border:2px solid #67e8f9;color:#155e75;border-radius:12px;padding:10px;margin:8px 0}
.ok{background:#f0fdf4;border:2px solid #bbf7d0;color:#166534;border-radius:12px;padding:10px;margin:8px 0}
hr.sep{border:none;height:1px;background:#e5e7eb;margin:10px 0}
</style>
</head>
<body>
<header>
  <div class="wrap row">
    <strong>[R004f‑l] Admin</strong>
    <span class="pill" id="counts">Rooms: 0 | Calendars: 0 | Fix: 0</span>
    <div class="sp"></div>
    <label class="btn small">Import JSON<input id="imp" type="file" accept="application/json" style="display:none"></label>
    <button id="export" class="btn small">Export JSON</button>
    <button id="clear" class="btn small">Clear draft</button>
    <button id="release" class="btn small primary">Release notes</button>
  </div>
</header>

<main class="wrap">
  <div class="card">
    <div class="h"><b>Admin</b><span class="pill">Calendar Pack — Opening hours + Availability engine + Quote gate + Fix Log</span></div>
    <div class="c">
      <div class="tabs">
        <button data-tab="hours" class="active">1) Opening hours</button>
        <button data-tab="calendar">2) Availability</button>
        <button data-tab="quote">3) Quote preview (gate)</button>
        <button data-tab="fix">4) Fix log</button>
        <button data-tab="raw">5) Raw JSON</button>
      </div>

      <!-- OPENING HOURS -->
      <section id="hours" class="section active">
        <div class="grid g2">
          <div>
            <label>Room</label>
            <select id="oh-room"></select>
          </div>
          <div>
            <label>Timezone (IANA)</label>
            <input id="oh-tz" placeholder="Europe/Dublin">
          </div>
        </div>
        <div class="info" style="margin-top:10px">Leave a day blank to close it. Add multiple ranges if needed.</div>
        <div id="oh-table" class="tableWrap" style="margin-top:10px"></div>
        <div class="row" style="margin-top:10px">
          <button id="oh-save" class="btn small primary">Save opening hours</button>
          <div class="sp"></div>
          <button id="oh-sync" class="btn small">Sync calendars with rooms</button>
          <button id="oh-copy" class="btn small">Copy hours & tz to all rooms</button>
        </div>
      </section>

      <!-- CALENDAR -->
      <section id="calendar" class="section">
        <div class="grid g3">
          <div><label>Room</label><select id="cal-room"></select></div>
          <div><label>Date</label><input id="cal-date" type="date"/></div>
          <div><label>Type</label>
            <select id="cal-type">
              <option value="BOOKING">BOOKING</option>
              <option value="HOLD">HOLD</option>
              <option value="BLACKOUT">BLACKOUT</option>
              <option value="MAINTENANCE">MAINTENANCE</option>
            </select>
          </div>
        </div>
        <div id="oohNote" class="info" style="display:none;margin-top:10px">Outside opening hours → would trigger OOH pricing.</div>
        <div id="calWrap" style="margin-top:12px"></div>
        <div class="row" style="margin-top:10px">
          <div class="badge">Step: <span id="cal-step">—</span> mins</div>
          <div class="badge">Buffers: <span id="cal-buf">—</span> mins (pre/post)</div>
          <div class="badge">Lead time: <span id="cal-lead">—</span></div>
        </div>
        <div class="info" style="margin-top:10px"><b>How:</b> Drag on the grid to create. Drag an event to move. Drag its edges to resize. Click an event to <b>Delete</b>.</div>
      </section>

      <!-- QUOTE GATE -->
      <section id="quote" class="section">
        <div class="grid g4">
          <div><label>Room</label><select id="q-room"></select></div>
          <div><label>Start (ISO)</label><input id="q-start"></div>
          <div><label>End (ISO)</label><input id="q-end"></div>
          <div><label>People (optional)</label><input id="q-pax" type="number" min="1"></div>
        </div>
        <div class="row" style="margin-top:8px">
          <button id="q-check" class="btn small primary">Check availability</button>
          <button id="q-alt" class="btn small">Suggest ±2 days</button>
        </div>
        <div id="q-out" style="margin-top:12px"></div>
      </section>

      <!-- FIX LOG -->
      <section id="fix" class="section">
        <div class="grid g3">
          <div><label>Area</label>
            <select id="fix-area">
              <option>Rooms</option><option>Availability</option><option>Pricing</option><option>F&B</option><option>AV</option><option>General</option>
            </select>
          </div>
          <div class="g2" style="grid-column: span 2"><label>Note</label><input id="fix-note" placeholder="One-line note…"></div>
        </div>
        <div class="row" style="margin-top:8px">
          <button id="fix-add" class="btn small primary">Add note</button>
        </div>
        <div id="fix-list" style="margin-top:10px"></div>
      </section>

      <!-- RAW -->
      <section id="raw" class="section"><pre id="dump" style="white-space:pre-wrap"></pre></section>

    </div>
  </div>
</main>

<script>
(function(){
  const $=id=>document.getElementById(id);
  const KEY="admin_draft_v2";
  const DAYS=["Mon","Tue","Wed","Thu","Fri","Sat","Sun"];
  const DAYKEY=["MO","TU","WE","TH","FR","SA","SU"];

  // Load / Save
  function load(){ try{ return JSON.parse(localStorage.getItem(KEY)||"null") }catch(e){ return null } }
  function save(){ localStorage.setItem(KEY, JSON.stringify(state)); renderCounts(); renderRaw(); }

  // Initial state
  let state = load() || { rooms:[{id:"RM-101",name:"River room"}], calendars:{}, fixNotes:[] };

  function ensureCalendars(){ (state.rooms||[]).forEach(r=>{ if(!state.calendars[r.id]) state.calendars[r.id]={roomId:r.id,timezone:"Europe/Dublin",roundingStepMins:15,defaultPreBufferMins:0,defaultPostBufferMins:0,minLeadTimeMins:0,maxLeadTimeDays:365,openingHours:{},events:[]}; }); }
  ensureCalendars();

  // UI Helpers
  function renderCounts(){ $("counts").textContent=`Rooms: ${(state.rooms||[]).length} | Calendars: ${Object.keys(state.calendars).length} | Fix: ${(state.fixNotes||[]).length}`; }
  function renderRooms(sel){
    const rs=(state.rooms||[]);
    sel.innerHTML=rs.map(r=>`<option value="${r.id}">${r.name||r.id}</option>`).join("");
  }

  // Tabs
  document.querySelectorAll(".tabs button").forEach(b=>{
    b.onclick=()=>{
      document.querySelectorAll(".tabs button").forEach(x=>x.classList.remove("active"));
      b.classList.add("active");
      document.querySelectorAll(".section").forEach(s=>s.classList.remove("active"));
      document.getElementById(b.dataset.tab).classList.add("active");
      if(b.dataset.tab==="raw") renderRaw();
      if(b.dataset.tab==="calendar") renderCalendar();
      if(b.dataset.tab==="hours") renderHours();
      if(b.dataset.tab==="quote") renderQuote();
      if(b.dataset.tab==="fix") renderFix();
    };
  });

  // Import/Export/Clear
  $("imp").addEventListener("change", ev=>{
    const f=ev.target.files[0]; if(!f) return;
    const r=new FileReader(); r.onload=()=>{ try{ state=JSON.parse(r.result||"{}"); state.calendars=state.calendars||{}; state.fixNotes=state.fixNotes||[]; ensureCalendars(); renderAll(); save(); alert("Import complete ✔"); }catch(e){ alert("Invalid JSON"); } };
    r.readAsText(f);
  });
  $("export").onclick=()=>{
    const a=document.createElement("a"), ts=new Date().toISOString().replace(/[:.]/g,"-");
    a.download=`admin-data_R004f-l_${ts}.json`;
    a.href=URL.createObjectURL(new Blob([JSON.stringify(state,null,2)],{type:"application/json"}));
    a.click();
  };
  $("clear").onclick=()=>{ if(confirm("Clear local draft?")){ localStorage.removeItem(KEY); location.reload(); } };
  $("release").onclick=()=>{
    alert("R004f‑l Calendar Pack:\n• Opening hours editor (per room) with copy-to-all\n• Availability engine v1 (drag/move/resize, buffers, overlap, lead-times, OOH flag)\n• Quote preview gate: availability check + suggestions ±2 days\n• Global Fix Log\n• Import/Export JSON\n\nNext: wire into full Pricing Preview.");
  };

  // ----- Opening hours -----
  function renderHours(){
    renderRooms($("oh-room"));
    const rid=$("oh-room").value;
    const cal=state.calendars[rid];
    $("oh-tz").value = cal.timezone || "Europe/Dublin";

    const tbl=document.createElement("table"); tbl.style.width="100%"; tbl.style.borderCollapse="collapse";
    tbl.innerHTML = `<thead><tr>${["Day","Range 1","Range 2","Range 3"].map(h=>`<th style="text-align:left;padding:6px 8px;border-bottom:1px solid #e5e7eb">${h}</th>`).join("")}</tr></thead>`;
    const tb=document.createElement("tbody");

    function rangeCell(dayKey, idx){
      const r=(cal.openingHours?.[dayKey]||[])[idx]||{start:"",end:""};
      return `<td style="padding:6px 8px"><div class="row"><input data-oh="${dayKey}:${idx}:s" placeholder="HH:mm" value="${r.start||""}" style="width:120px"> <span>–</span> <input data-oh="${dayKey}:${idx}:e" placeholder="HH:mm" value="${r.end||""}" style="width:120px"></div></td>`;
    }
    for(let i=0;i<7;i++){
      const dName=DAYS[i], dk=DAYKEY[i];
      const tr=document.createElement("tr");
      tr.innerHTML=`<td style="padding:6px 8px;width:120px"><b>${dName}</b></td>${rangeCell(dk,0)}${rangeCell(dk,1)}${rangeCell(dk,2)}`;
      tb.appendChild(tr);
    }
    tbl.appendChild(tb);
    $("oh-table").innerHTML=""; $("oh-table").appendChild(tbl);
  }

  $("oh-save").onclick=()=>{
    const rid=$("oh-room").value; const cal=state.calendars[rid];
    cal.timezone = $("oh-tz").value||"Europe/Dublin";
    cal.openingHours = {};
    document.querySelectorAll("[data-oh]").forEach(inp=>{
      const [dk,idx,part]=inp.getAttribute("data-oh").split(":");
      cal.openingHours[dk]=cal.openingHours[dk]||[{},{},{}];
      if(part==="s") cal.openingHours[dk][idx].start = inp.value.trim();
      if(part==="e") cal.openingHours[dk][idx].end = inp.value.trim();
    });
    // Remove empty ranges
    Object.keys(cal.openingHours).forEach(k=>{
      cal.openingHours[k]=(cal.openingHours[k]||[]).filter(r=> (r.start && r.end));
      if(!cal.openingHours[k].length) delete cal.openingHours[k];
    });
    save(); alert("Opening hours saved ✔");
  };
  $("oh-sync").onclick=()=>{ ensureCalendars(); save(); alert("Calendars synced with rooms ✔"); };
  $("oh-copy").onclick=()=>{
    if(!confirm("Copy current room hours & tz to ALL rooms?")) return;
    const src=state.calendars[$("oh-room").value];
    (state.rooms||[]).forEach(r=>{
      state.calendars[r.id].timezone=src.timezone;
      state.calendars[r.id].openingHours=JSON.parse(JSON.stringify(src.openingHours||{}));
    });
    save(); alert("Copied to all rooms ✔");
  };

  // ----- Availability engine (calendar) -----
  const SLOT_H=28;
  function pad(n){ return String(n).padStart(2,"0"); }
  function slots(step){ const out=[]; for(let h=0; h<24; h++){ for(let m=0; m<60; m+=step){ out.push({h,m}); } } return out; }
  function yFor(step,h,m){ const i=Math.round((h*60+m)/step); return i*SLOT_H; }

  function applyBuffers(ev, cal){ const pre=(ev.preBufferMins??cal.defaultPreBufferMins??0); const post=(ev.postBufferMins??cal.defaultPostBufferMins??0); return { start:new Date(new Date(ev.startsAt).getTime()-pre*60000), end:new Date(new Date(ev.endsAt).getTime()+post*60000) }; }
  function overlap(a,b){ return a.start < b.end && b.start < a.end }
  function checkOverlap(cal, candidate){
    const cand=applyBuffers(candidate,cal);
    for(const e of (cal.events||[])){
      if(e.status==="cancelled") continue;
      if(e.id===candidate.id) continue;
      const other=applyBuffers(e,cal);
      if(overlap(cand,other)) return {ok:false,conflict:e};
    }
    return {ok:true};
  }
  function withinLeadTimes(cal, startISO){
    const min=cal.minLeadTimeMins||0; const maxd=cal.maxLeadTimeDays||365;
    const now=new Date(); const start=new Date(startISO);
    if(start.getTime() < now.getTime()+min*60000) return {ok:false,reason:`Inside minimum lead time (${min} mins)`};
    if(start.getTime() > now.getTime()+maxd*86400000) return {ok:false,reason:`Beyond maximum lead time (${maxd} days)`};
    return {ok:true};
  }
  const DKEY=["SU","MO","TU","WE","TH","FR","SA"];
  function withinOpening(cal, startIso, endIso){
    const oh=cal.openingHours||{};
    const s=new Date(startIso), e=new Date(endIso);
    let cursor=new Date(s);
    while(cursor<e){
      const day=DKEY[cursor.getDay()];
      const ranges=(oh[day]||[]);
      if(!ranges.length) return false;
      const mins=t=>{ const [H,M]=t.split(":").map(Number); return H*60+M; };
      const segStartMin=cursor.getHours()*60+cursor.getMinutes();
      const segEndMin=(cursor.toDateString()===e.toDateString()? e.getHours()*60+e.getMinutes(): 24*60);
      let covered=false;
      ranges.forEach(r=>{ if(!r.start||!r.end) return; const rs=mins(r.start), re=mins(r.end); if(segStartMin>=rs && segEndMin<=re) covered=true; });
      if(!covered) return false;
      // next midnight
      cursor=new Date(cursor.getFullYear(),cursor.getMonth(),cursor.getDate()+1,0,0,0);
    }
    return true;
  }
  function detectOOH(cal, ev){ return !withinOpening(cal, ev.startsAt, ev.endsAt); }

  function addEvent(cal, ev){
    const lead=withinLeadTimes(cal, ev.startsAt); if(!lead.ok) return lead;
    const ol=checkOverlap(cal, ev); if(!ol.ok) return {ok:false,reason:"Conflicts with existing event (buffers)"};
    cal.events=cal.events||[]; cal.events.push(ev); return {ok:true};
  }
  function updateEvent(cal, ev){
    const ix=(cal.events||[]).findIndex(e=>e.id===ev.id); if(ix<0) return {ok:false,reason:"Event not found"};
    const ol=checkOverlap(cal, ev); if(!ol.ok) return {ok:false,reason:"Conflicts with existing event (buffers)"};
    cal.events[ix]=ev; return {ok:true};
  }
  function deleteEvent(cal, id){ cal.events=(cal.events||[]).filter(e=>e.id!==id) }

  function renderCalendar(){
    renderRooms($("cal-room"));
    const rid=$("cal-room").value;
    const cal=state.calendars[rid];
    const step=cal.roundingStepMins||30;
    $("cal-step").textContent=step;
    $("cal-buf").textContent=`${cal.defaultPreBufferMins||0}/${cal.defaultPostBufferMins||0}`;
    $("cal-lead").textContent=`min ${cal.minLeadTimeMins||0}m, max ${cal.maxLeadTimeDays||365}d`;
    const date=$("cal-date").value || new Date().toISOString().slice(0,10); $("cal-date").value=date;

    const sw=slots(step);
    const wrap=document.createElement("div"); wrap.className="calendar";
    const head=document.createElement("div"); head.className="calHead"; head.innerHTML=`<div></div><div>${date}</div>`;
    wrap.appendChild(head);

    const times=document.createElement("div"); times.className="times";
    sw.forEach((s,i)=>{ const div=document.createElement("div"); div.className="slot"; if(s.m===0){ div.style.borderBottom="1px solid #e5e7eb"; div.innerHTML=`<div style="position:relative;top:-10px;right:6px;text-align:right;font-size:11px;color:#64748b">${pad(s.h)}:${pad(s.m)}</div>` } times.appendChild(div); });
    wrap.appendChild(times);

    const col=document.createElement("div"); col.className="col"; col.style.height=(28*sw.length)+"px";

    function place(ev){
      if(!ev.startsAt.startsWith(date)) return;
      const s=new Date(ev.startsAt), e=new Date(ev.endsAt);
      const y=yFor(step,s.getHours(),s.getMinutes());
      const y2=yFor(step,e.getHours(),e.getMinutes());
      const div=document.createElement("div");
      const type=ev.type; const cls= type==="BOOKING"?"ev-book": type==="HOLD"?"ev-hold": type==="BLACKOUT"?"ev-blk":"ev-main";
      div.className="event "+cls;
      div.style.top=(y+2)+"px"; div.style.height=(Math.max(28, y2-y)-4)+"px";
      div.innerHTML=`<div style="display:flex;justify-content:space-between;align-items:center;gap:6px"><div>${type} ${pad(s.getHours())}:${pad(s.getMinutes())}–${pad(e.getHours())}:${pad(e.getMinutes())}</div><button data-del="${ev.id}" class="btn small" style="padding:2px 8px">Delete</button></div>`;
      div.onmousedown=(me)=>{ drag={mode:"move", id:ev.id, y0:me.clientY, start:new Date(ev.startsAt), end:new Date(ev.endsAt)}; me.preventDefault(); };
      col.appendChild(div);
    }
    (cal.events||[]).forEach(place);

    col.addEventListener("click", (e)=>{
      const d=(e.target.closest("button")||{}).getAttribute?.("data-del");
      if(d){ deleteEvent(cal, d); save(); renderCalendar(); }
    });

    // drag creation & editing
    let drag=null; const SLOT_H=28; const stepMs=step*60000;
    col.onmousedown=(e)=>{
      if(e.target!==col) return;
      const rect=col.getBoundingClientRect();
      const y=e.clientY-rect.top;
      const slot=Math.round(y/SLOT_H);
      const startMin=slot*step; const stH=Math.floor(startMin/60), stM=startMin%60;
      const sISO=new Date(`${date}T${pad(stH)}:${pad(stM)}:00`).toISOString();
      const eISO=new Date(new Date(sISO).getTime()+stepMs).toISOString();
      drag={mode:"create", y0:e.clientY, start:new Date(sISO), end:new Date(eISO)};
      renderGhost();
      e.preventDefault();
    };
    document.onmousemove=(e)=>{
      if(!drag) return;
      const deltaPx = e.clientY - drag.y0;
      const deltaSlots = Math.round(deltaPx / SLOT_H);
      if(drag.mode==="move"){
        const dur = drag.end - drag.start;
        const newStart = new Date(drag.start.getTime() + deltaSlots*stepMs);
        const newEnd = new Start = new Date(newStart.getTime()+dur);
      }else if(drag.mode==="resize-s"){
        const newStart = new Date(drag.start.getTime()+deltaSlots*stepMs);
        if(newStart < drag.end){ drag.start=newStart; drag.y0=e.clientY; }
      }else if(drag.mode==="resize-e"){
        const newEnd = new Date(drag.end.getTime()+deltaSlots*stepMs);
        if(newEnd > drag.start){ drag.end=newEnd; drag.y0=e.clientY; }
      }else if(drag.mode==="create"){
        const newEnd=new Date(drag.end.getTime()+deltaSlots*stepMs);
        if(newEnd>drag.start){ drag.end=newEnd; drag.y0=e.clientY; }
      }
      renderGhost();
    };
    document.onmouseup=()=>{ if(!drag) return clearGhost(); };

    let ghost=null;
    function renderGhost(){
      clearGhost(1);
      const s=drag.start, e=drag.end;
      const y=yFor(step,s.getHours(),s.getMinutes()), y2=yFor(step,e.getHours(),e.getMinutes());
      ghost=document.createElement("div"); ghost.className="ghost"; ghost.style.top=(y+2)+"px"; ghost.style.height=(Math.max(28,y2-y)-4)+"px";
      col.appendChild(ghost);
      const ev={ id:drag.id||("EVT-"+Math.random().toString(36).slice(2,8).toUpperCase()), roomId:rid, type:$("cal-type").value, status:"provisional", startsAt:s.toISOString(), endsAt:e.toISOString() };
      $("oohNote").style.display = detectOOH(cal, ev) ? "block" : "none";
    }
    function clearGhost(skipSave){
      if(!drag) return;
      if(!skipSave){
        const s=drag.start, e=drag.end;
        const ev={ id:drag.id||("EVT-"+Math.random().toString(36).slice(2,8).toUpperCase()), roomId:rid, type:$("cal-type").value, status:"confirmed", startsAt:s.toISOString(), endsAt:e.toISOString(), preBufferMins:cal.defaultPreBufferMins, postBufferMins:cal.defaultPostBufferMins };
        if(drag.mode==="create"){ const res=addEvent(cal, ev); if(!res.ok) alert(res.reason||"Cannot add"); }
      }
      drag=null; ghost?.remove(); renderCalendar(); save();
    }

    $("calWrap").innerHTML=""; $("calWrap").appendChild(wrap); wrap.appendChild(col);
  }

  // ----- Quote Preview Gate -----
  function isAvailable(cal, startISO, endISO){
    const probe={ id:"_probe_", roomId:cal.roomId, type:"BOOKING", status:"provisional", startsAt:startISO, endsAt:endISO };
    const lead=withinLeadTimes(cal, startISO); if(!lead.ok) return {available:false, reason:lead.reason};
    const ol=checkOverlap(cal, probe); if(!ol.ok) return {available:false, reason:"Clashes with
